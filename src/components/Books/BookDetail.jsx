import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Header2 } from "components";
import { BestNew } from "components";
import api from "../../api";
import { useAuth } from "AuthContext";

const BookDetail = () => {
  const { book_id } = useParams(); // URL ÌååÎùºÎØ∏ÌÑ∞Î°úÎ∂ÄÌÑ∞ book_idÎ•º Í∞ÄÏ†∏Ïò¥.
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth(); // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞

  const [book, setBook] = useState(null);
  const [isDownloaded, setIsDownloaded] = useState(false);
  const [isFavorite, setIsFavorite] = useState(false);
  const [error, setError] = useState(null); // ÏóêÎü¨ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [userId, setUserId] = useState(null); // ÏÇ¨Ïö©Ïûê ID ÏÉÅÌÉú Ï∂îÍ∞Ä

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const userResponse = await api.get("/user-data");
        setUserId(userResponse.data.userId); // ÏÇ¨Ïö©Ïûê ID Ï†ÄÏû•
      } catch (err) {
        console.error("ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: ", err);
        setError("ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    };

    fetchUserData();
  }, []);

  useEffect(() => {
    if (userId === null) return; // ÏÇ¨Ïö©Ïûê IDÍ∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ ÏïÑÎ¨¥ ÏûëÏóÖÎèÑ ÌïòÏßÄ ÏïäÏùå

    const fetchBookAndUserbookId = async () => {
      try {
        // Ï±Ö Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Í∏∞
        const bookResponse = await api.get(`/books/${book_id}`);
        setBook(bookResponse.data);

        // Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏
        const userbookId = `${userId}${book_id}`; // userbookId ÏÉùÏÑ±
        const isFav = await checkFavoriteStatus(userbookId);
        setIsFavorite(isFav);
      } catch (err) {
        console.error(`Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: `, err);
        setError("Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    };

    fetchBookAndUserbookId();
  }, [userId, book_id]);

  const checkFavoriteStatus = async (userbookId) => {
    try {
      const bookmarkResponse = await api.get(`/bookmarks/user/${userbookId}`);
      const bookmarks = bookmarkResponse.data;
      return bookmarks.some((b) => b.bookId === book_id);
    } catch (error) {
      if (error.response && error.response.status === 404) {
        // Ï¶êÍ≤®Ï∞æÍ∏∞ Î™©Î°ùÏóê Ï±ÖÏù¥ ÏóÜÏùÑ Í≤ΩÏö∞ ÏóêÎü¨Î•º Î∞úÏÉùÏãúÌÇ§ÏßÄ ÏïäÏùå
        return false;
      } else {
        console.error("Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: ", error);
        setError("Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÎäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        return false; // ÏóêÎü¨ Î∞úÏÉù Ïãú Í∏∞Î≥∏Í∞í Î∞òÌôò
      }
    }
  };

  const handleDownload = async () => {
    try {
      // Îã§Ïö¥Î°úÎìú ÎàÑÎ•¥Î©¥ [ÎÇ¥ Ï±ÖÏû• - ÎèÖÏÑú Ï§ë]ÏúºÎ°ú Ï†ÑÎã¨
      await api.post(`/user-isReading`, { userId, bookID: book_id });
      setIsDownloaded(true);
    } catch (error) {
      console.error(`${book_id} Ï±Ö Îã§Ïö¥Î°úÎìú Ïã§Ìå®: `, error);
      setError("Ï±Ö Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  const handleAddBookmark = async () => {
    if (!isAuthenticated) {
      navigate("/login"); // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
      return;
    }

    try {
      const userbookId = `${userId}${book_id}`; // userbookId ÏÉùÏÑ±
      await api.post(`/bookmarks/addBook`, null, {
        params: { userbookId },
      });
      setIsFavorite(true);
    } catch (error) {
      console.error("Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞Ä Ïã§Ìå®: ", error);
      setError("Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  const handleRemoveBookmark = async () => {
    if (!isAuthenticated) {
      navigate("/login"); // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
      return;
    }

    try {
      const userbookId = `${userId}${book_id}`; // userbookId ÏÉùÏÑ±
      await api.delete(`/bookmarks/remove`, {
        params: { userbookId },
      });
      setIsFavorite(false);
    } catch (error) {
      console.error("Ï¶êÍ≤®Ï∞æÍ∏∞ Ï†úÍ±∞ Ïã§Ìå®: ", error);
      setError("Ï¶êÍ≤®Ï∞æÍ∏∞ Ï†úÍ±∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  const handleRead = () => {
    navigate(`/books/${book_id}/content`);
  };

  if (!book) return <p>Loading...</p>;

  return (
    <>
      <Header2 />

      <div id="book-detail">
        <div className="bookDetail-cover">
          <img src={book.coverImageUrl} alt={`${book.title} cover`} />
        </div>

        <div className="book-info">
          <div className="info-header">
            <h1>{book.title}</h1>
            <div className="book-actions">
              {!isDownloaded ? (
                <button className="download-button" onClick={handleDownload}>
                  Îã§Ïö¥Î°úÎìú
                </button>
              ) : (
                <button className="read-button" onClick={handleRead}>
                  Î∞îÎ°ú ÏùΩÍ∏∞
                </button>
              )}
              <button
                className={`favorite-button ${isFavorite ? "active" : ""}`}
                onClick={isFavorite ? handleRemoveBookmark : handleAddBookmark}
              >
                {isFavorite ? "‚ù§Ô∏è" : "ü§ç"}
              </button>
            </div>
          </div>

          <div className="info-item summary">
            <p>{book.summary}</p>
          </div>
          <div className="info-item author">
            <p>{book.author} ÏßÄÏùå</p>
          </div>
          <div className="info-item publisher">
            <p>
              {book.category} | {book.publisher} | {book.publicationDate}
            </p>
          </div>
        </div>

        {isDownloaded && (
          <div className="read-button-container">
            <button className="read-button" onClick={handleRead}>
              Î∞îÎ°ú ÏùΩÍ∏∞
            </button>
          </div>
        )}
      </div>

      <BestNew />
    </>
  );
};

export default BookDetail;
